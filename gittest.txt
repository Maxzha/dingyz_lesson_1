first line 

	win +w 屏幕一键截图

second line
# 版本信息名可以重复
GIT:
	git init #创建git版本仓库
	
	git add 文件名 #加入文件
 
	git commit -m'版本信息名' #提交设置版本说明信息

	git reset --hard HEAD~数字 #回退之前版本

	git reset --hard commit名 #回退或者恢复版本使用commit名

	git log #查看log记录  (git log --pretty=oneline #干净显示  、git log --graph --pretty=oneline # 干净显示且显示节点图)

	git reflog #关闭终端后查看log记录

	git revert -n commit名 	
	git commit -m'版本信息名' #反做：使commit名的版本失效创建无commit名的版本

	git status #查看当前git版本库的状态 已修改 未add进入暂存区的
	
	git checkout -- filename #在工作区变动过的文件进行删除 如果已经add进入版本库则无法改动

	git reset HEAD 文件名  #将已经保存到暂存区的文件撤销回工作区

	git diff HEAD -- filename # 查看HEAD版本仓库与工作区中file的区别 ---为HEAD +++为工作区file

	git diff HEAD^ HEAD -- filename # 在版本库中 HEAD指针的上一个版本和HEAD指针现在的版本的比较

	git rm filename 
	git commit -m"版本名"	# git中删除文件并commit

	git branch # 查看当前目录下的git 分支   
	
	git branch 分支名 # 创建分支

	git checkout -b 分支名 # 创建分支并切换HEAD指针指向新的分支

	git checkout 分支名 # 快速切换分支

	git merge 分支名 # 快速合并分支

	git rebase 分支名 #  在分支中rebase将最新版本库作为主线版本库的延伸 而非合并 黄金法则 在分支中rebase不要再主线中使用 

	git add 文件名
	git rebase --continue  # rebase发生冲突时，解决冲突后，先add 在--continue 解决 

	git rebase --abort # 取消rebase

	git branch -d 分支名 # 删除分支

文件合并冲突： 先将冲突文件手动处理（删除文件中冲突标注）再进行 add 以及 commit操作 然后进行合并

	git merge --no-ff -m "重新定义的版本名" 分支名 # 禁用fast-forward快速合并的合并

	git clone 克隆地址  # 克隆github等中央仓库的地址的代码 
	# 如果克隆出错 输入 eval "$(ssh-agent -s)"
			   ssh-add
 
	git push -u origin 分支名  #提交本地分支到远程仓库 -u参数可以使下次提交简化为git push 即可

	git remote set-url origin git@github.com:用户名/远程仓库名.git  #更改远程仓库链接方式 将https改为ssh



